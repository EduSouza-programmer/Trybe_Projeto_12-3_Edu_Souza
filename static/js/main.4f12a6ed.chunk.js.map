{"version":3,"sources":["data.js","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["movies","title","subtitle","storyline","rating","imagePath","bookmarked","genre","Rating","this","props","className","data-testid","React","Component","MovieCard","movie","alt","src","MovieList","map","key","SearchBar","searchText","onSearchTextChange","htmlFor","type","name","value","onChange","data-key","bookmarkedOnly","onBookmarkedChange","checked","selectedGenre","onSelectedGenreChange","onSubmit","event","preventDefault","inputSearch","AddMovie","computedInputsAddMovie","bind","computedMovie","state","setState","target","onClick","cleanState","step","image","button","MovieLibrary","computedInputsSearchBar","addComputedMovie","result","filter","field","toLowerCase","includes","allMoviesFounds","searchField","removeRepeated","Set","reduce","acc","console","log","moviesGenre","Bookmarkeds","isBookmarkeds","searchMoviesInFields","dataset","isValue","moviesSearchResult","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f12a6ed.chunk.js","sourcesContent":["const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\n// prettier-ignore\nRating.propTypes = { rating: PropTypes.number.isRequired };\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    // const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = this.props.movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">\n            {title}\n          </h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={rating} />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      // prettier-ignore\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {movies.map((movie) => (<MovieCard key={movie.title} movie={movie} />))}\n      </div>\n    );\n  }\n}\n\n// prettier-ignore\nMovieList.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends Component {\n  inputSearch() {\n    const { searchText, onSearchTextChange } = this.props;\n    return (\n      <label htmlFor=\"search-text\" data-testid=\"text-input-label\">\n        Inclui o texto:\n        <input\n          type=\"text\"\n          name=\"search-text\"\n          value={searchText}\n          onChange={onSearchTextChange}\n          data-testid=\"text-input\"\n          data-key=\"searchText\"\n        />\n      </label>\n    );\n  }\n\n  bookmarked() {\n    const { bookmarkedOnly, onBookmarkedChange } = this.props;\n    return (\n      <label htmlFor=\"bookmarked-change\" data-testid=\"checkbox-input-label\">\n        <input\n          type=\"checkbox\"\n          name=\"bookmarked-change\"\n          data-testid=\"checkbox-input\"\n          checked={bookmarkedOnly}\n          onChange={onBookmarkedChange}\n          data-key=\"bookmarkedOnly\"\n        />\n        Mostrar somente favoritos\n      </label>\n    );\n  }\n  selectedGenre() {\n    const { selectedGenre, onSelectedGenreChange } = this.props;\n    return (\n      <label htmlFor=\"select-input\" data-testid=\"select-input-label\">\n        Filtrar por gênero\n        <select\n          value={selectedGenre}\n          onChange={onSelectedGenreChange}\n          data-testid=\"select-input\"\n          name=\"selected-genre\"\n          data-key=\"selectedGenre\"\n        >\n          <option value=\"\" data-testid=\"select-option\">\n            Todos\n          </option>\n          <option value=\"action\" data-testid=\"select-option\">\n            Ação\n          </option>\n          <option value=\"comedy\" data-testid=\"select-option\">\n            Comédia\n          </option>\n          <option value=\"thriller\" data-testid=\"select-option\">\n            Suspense\n          </option>\n        </select>\n      </label>\n    );\n  }\n  render() {\n    return (\n      <div>\n        <form\n          // prettier-ignore\n          onSubmit={(event) => event.preventDefault()}\n          data-testid=\"search-bar-form\"\n        >\n          {this.inputSearch()}\n          {this.bookmarked()}\n          {this.selectedGenre()}\n        </form>\n      </div>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.computedInputsAddMovie = this.computedInputsAddMovie.bind(this);\n    this.computedMovie = this.computedMovie.bind(this);\n\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n      bookmarked: false,\n    };\n  }\n\n  cleanState() {\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n      bookmarked: false,\n    });\n  }\n\n  computedInputsAddMovie({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  computedMovie(event) {\n    event.preventDefault();\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.cleanState();\n  }\n\n  title() {\n    return (\n      <label htmlFor=\"title\" data-testid=\"title-input-label\">\n        Título\n        <input\n          name=\"title\"\n          type=\"text\"\n          data-testid=\"title-input\"\n          value={this.state.title}\n          onChange={this.computedInputsAddMovie}\n        />\n      </label>\n    );\n  }\n\n  subtitle() {\n    return (\n      <label htmlFor=\"subtitle\" data-testid=\"subtitle-input-label\">\n        Subtítulo\n        <input\n          name=\"subtitle\"\n          type=\"text\"\n          data-testid=\"subtitle-input\"\n          value={this.state.subtitle}\n          onChange={this.computedInputsAddMovie}\n        />\n      </label>\n    );\n  }\n\n  image() {\n    return (\n      <label htmlFor=\"imagePath\" data-testid=\"image-input-label\">\n        Imagem\n        <input\n          name=\"imagePath\"\n          type=\"text\"\n          data-testid=\"image-input\"\n          value={this.state.imagePath}\n          onChange={this.computedInputsAddMovie}\n        />\n      </label>\n    );\n  }\n\n  storyline() {\n    return (\n      <label htmlFor=\"storyline\" data-testid=\"storyline-input-label\">\n        Sinopse\n        <textarea\n          name=\"storyline\"\n          data-testid=\"storyline-input\"\n          value={this.state.storyline}\n          onChange={this.computedInputsAddMovie}\n        />\n      </label>\n    );\n  }\n\n  rating() {\n    return (\n      <label htmlFor=\"rating\" data-testid=\"rating-input-label\">\n        Avaliação\n        <input\n          name=\"rating\"\n          type=\"number\"\n          step=\"0.1\"\n          data-testid=\"rating-input\"\n          value={this.state.rating}\n          onChange={this.computedInputsAddMovie}\n        />\n      </label>\n    );\n  }\n\n  genre() {\n    return (\n      <label htmlFor=\"genre\" data-testid=\"genre-input-label\">\n        Gênero\n        <select\n          name=\"genre\"\n          data-testid=\"genre-input\"\n          value={this.state.genre}\n          onChange={this.computedInputsAddMovie}\n        >\n          <option value=\"action\" data-testid=\"genre-option\">\n            Ação\n          </option>\n          <option value=\"comedy\" data-testid=\"genre-option\">\n            Comédia\n          </option>\n          <option value=\"thriller\" data-testid=\"genre-option\">\n            Suspense\n          </option>\n        </select>\n      </label>\n    );\n  }\n\n  button() {\n    return (\n      <button\n        type=\"submit\"\n        name=\"sendButton\"\n        data-testid=\"send-button\"\n        onClick={this.computedMovie}\n      >\n        Adicionar filme\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form data-testid=\"add-movie-form\">\n          {this.title()}\n          {this.subtitle()}\n          {this.image()}\n          {this.storyline()}\n          {this.rating()}\n          {this.genre()}\n          {this.button()}\n        </form>\n      </div>\n    );\n  }\n}\n\nAddMovie.propTypes = { onClick: PropTypes.func.isRequired };\n\nexport default AddMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends Component {\n  constructor(props) {\n    super(props);\n    const movies = this.props.movies;\n\n    this.computedInputsSearchBar = this.computedInputsSearchBar.bind(this);\n    this.addComputedMovie = this.addComputedMovie.bind(this);\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies,\n    };\n  }\n\n  addComputedMovie(result) {\n    this.setState({ movies: [...this.state.movies, result] });\n  }\n\n  isBookmarkeds(movies) {\n    const moviesFiltered = movies.filter((movie) => {\n      if (this.state.bookmarkedOnly) {\n        return movie.bookmarked === this.state.bookmarkedOnly;\n      }\n      return movie;\n    });\n    return moviesFiltered;\n  }\n\n  // prettier-ignore\n  searchField(movies, field) {\n    const foundMovies = movies.filter((movie) =>\n      movie[field].toLowerCase().includes(this.state.searchText.toLowerCase()));\n    return foundMovies;\n  }\n\n  searchMoviesInFields(movies) {\n    const allMoviesFounds = [\n      ...this.searchField(movies, 'title'),\n      ...this.searchField(movies, 'subtitle'),\n      ...this.searchField(movies, 'storyline'),\n    ];\n\n    const removeRepeated = [\n      ...new Set(allMoviesFounds.reduce((acc, movie) => [...acc, movie], [])),\n    ];\n    console.log(removeRepeated);\n    return removeRepeated;\n  }\n\n  // prettier-ignore\n  moviesSearchResult() {\n    const moviesGenre = this.state.movies.filter((movie) =>\n      movie.genre.includes(this.state.selectedGenre));\n\n    const Bookmarkeds = this.isBookmarkeds(moviesGenre);\n    const moviesResult = this.searchMoviesInFields(Bookmarkeds);\n    return moviesResult;\n  }\n\n  computedInputsSearchBar({ target: { value, checked, dataset, type } }) {\n    const isValue = type === 'checkbox' ? checked : value;\n    this.setState({ [dataset.key]: isValue });\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchBar\n          searchText={this.state.searchText}\n          onSearchTextChange={this.computedInputsSearchBar}\n          bookmarkedOnly={this.state.bookmarkedOnly}\n          onBookmarkedChange={this.computedInputsSearchBar}\n          selectedGenre={this.state.selectedGenre}\n          onSelectedGenreChange={this.computedInputsSearchBar}\n        />\n        <MovieList movies={this.moviesSearchResult()} />\n        <AddMovie onClick={this.addComputedMovie} />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieLibrary;\n","import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport movies from './data';\nimport MovieLibrary from './components/MovieLibrary';\n\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={movies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}